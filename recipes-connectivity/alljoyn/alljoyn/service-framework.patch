Index: service_framework-14.12/SConscript
===================================================================
--- service_framework-14.12.orig/SConscript
+++ service_framework-14.12/SConscript
@@ -1,3 +1,10 @@
+#
+# This version of SConscript is modified from the original file included in
+# https://git.allseenalliance.org/cgit/lighting/service_framework.git/snapshot/service_framework-14.12.zip
+# The modifications include checking if other services has been built
+# and updated paths to other SConscripts according to build environment
+#
+
 import os
 
 Import('env')
@@ -7,25 +14,27 @@ env['_ALLJOYN_LSF_'] = True
 if not env.has_key('_ALLJOYNCORE_') and os.path.exists('../alljoyn/alljoyn_core/SConscript'):
    env.SConscript('../alljoyn/alljoyn_core/SConscript')
 
+if not env.has_key('_ALLJOYN_SERVICES_COMMON_') and os.path.exists('../../services/base/services_common/SConscript'):
+    env.SConscript('../../services/base/services_common/SConscript')
+
+if not env.has_key('_ALLJOYN_CONFIG_') and os.path.exists('../../services/base/config/SConscript'):
+    env.SConscript('../../services/base/config/SConscript')
+
+if not env.has_key('_ALLJOYN_NOTIFICATION_') and os.path.exists('../../services/base/notification/SConscript'):
+    env.SConscript('../../services/base/notification/SConscript')
+
 # Do not build samples for services  
 env['BUILD_SERVICES_SAMPLES'] = 'off'
 
 # Add all services include path
-env.Append(CPPPATH = '$DISTDIR/about/inc');
 env.Append(CPPPATH = '$DISTDIR/config/inc');
-env.Append(CPPPATH = '$DISTDIR/services_common/inc');
 env.Append(CPPPATH = '$DISTDIR/notification/inc');
 
-# Build all the services
-env.SConscript('../../base/config/cpp/SConscript', {'config_env': env})
-env.SConscript('../../base/notification/cpp/SConscript', {'nsenv': env})
-env.SConscript('../../base/services_common/cpp/SConscript', {'services_common_env': env})
-
 lsf_env = env.Clone()
 lsf_env['WS'] = None 
- 
+
 # Add all services lib path
-lsf_env.Append(LIBPATH = '$DISTDIR/about/lib')    
+lsf_env.Append(LIBPATH = '$DISTDIR/about/lib')
 lsf_env.Append(LIBPATH = '$DISTDIR/services_common/lib')  
 lsf_env.Append(LIBPATH = '$DISTDIR/notification/lib') 
 lsf_env.Append(LIBPATH = '$DISTDIR/config/lib') 
@@ -38,19 +47,19 @@ if lsf_env['OS'] == 'openwrt':
     lsf_env.AppendUnique(LIBS = [ 'stdc++', 'pthread'])
 
 lsf_env.Install('$DISTDIR/cpp/bin', 'thin_core_library/lamp_service/routerconfig.xml')
-    
+
 # Build all the LSF Common objects   
 lsf_env.Append(CPPPATH = [ lsf_env.Dir('standard_core_library/common/inc') ])
 lsf_env.Append(CPPPATH = [ lsf_env.Dir('common/inc') ])
 lsf_env['common_srcs'] = lsf_env.Glob('standard_core_library/common/src/*.cc')
-#lsf_env['common_srcs'] += lsf_env.Glob('../../base/sample_apps/cpp/samples_common/*.cc')
+#lsf_env['common_srcs'] += lsf_env.Glob('../../services/base/sample_apps/cpp/samples_common/*.cc')
 lsf_env['common_objs'] = lsf_env.Object(lsf_env['common_srcs']) 
 
 #Build Lighting Controller Client
 lsf_client_env = lsf_env.Clone()
 lsf_client_env.Append(CPPPATH = [ lsf_client_env.Dir('standard_core_library/lighting_controller_client/inc') ])
 lsf_client_env.Prepend(LIBS = ['alljoyn_notification.a', 'alljoyn_about.a', 'alljoyn_config.a', 'alljoyn_services_common.a'])
-lsf_client_env['LSF_CLIENT_DISTDIR'] = 'build/linux/standard_core_library/lighting_controller_client'
+lsf_client_env['LSF_CLIENT_DISTDIR'] = '#build/linux/standard_core_library/lighting_controller_client'
 lsf_client_env.Install('$LSF_CLIENT_DISTDIR/inc', lsf_client_env.Glob('standard_core_library/common/inc/*.h'))
 lsf_client_env.Install('$LSF_CLIENT_DISTDIR/inc', lsf_client_env.Glob('standard_core_library/lighting_controller_client/inc/*.h'))
 lsf_client_env['client_srcs'] = lsf_client_env.Glob('standard_core_library/lighting_controller_client/src/*.cc')
@@ -70,12 +79,12 @@ else:
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(gtest_env)
-	
+
    if gtest_dir == '/usr':
       gtest_src_base = os.path.join(gtest_dir, 'src', 'gtest')
    else:
       gtest_src_base = gtest_dir
-	   
+
    # We compile with no rtti and no exceptions
    gtest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])
    gtest_env.Append(CPPDEFINES = ['GTEST_HAS_EXCEPTIONS=0'])
@@ -83,21 +92,21 @@ else:
    gtest_env.Replace(CPPPATH = [ gtest_src_base ])
    if gtest_dir != '/usr':
       gtest_env.Append(CPPPATH = [ gtest_env.Dir('$GTEST_DIR/include') ])
-      
-   gtest_env['LSF_TEST_DISTDIR'] = 'build/linux/standard_core_library/lighting_controller_client/unit_test/'
+
+   gtest_env['LSF_TEST_DISTDIR'] = '#build/linux/standard_core_library/lighting_controller_client/unit_test/'
    gtest_env['gtest_obj'] = gtest_env.StaticObject(target = '$LSF_TEST_DISTDIR/bin/gtest-all', source = [ '%s/src/gtest-all.cc' % gtest_src_base ]) 
    gtest_env.StaticLibrary('$LSF_TEST_DISTDIR/lib/gtest', gtest_env['gtest_obj']);
-
+   print "LSF_TEST_DISTDIR is:", gtest_env['LSF_TEST_DISTDIR']
 
    unittest_env = lsf_client_env.Clone()
-   
+
    gtest_dir = unittest_env['GTEST_DIR']
    if gtest_dir != '/usr':
       unittest_env.Append(CPPPATH = [gtest_dir + '/include'])
-   
+
    unittest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])
    unittest_env.Append(CPPDEFINES = ['GTEST_HAS_EXCEPTIONS=0'])
-   
+
    unittest_env.Append(CXXFLAGS=['-Wall',
                                 '-pipe',
                                 '-funsigned-char',
@@ -106,17 +115,17 @@ else:
       unittest_env.Append(CXXFLAGS='-g')
 
    unittest_env.Append(LIBS = ['rt', 'crypto'])
-      
+
    #gtest library file is placed in the same directory
-   unittest_env['LSF_TEST_DISTDIR'] = 'build/linux/standard_core_library/lighting_controller_client/unit_test/'
+   unittest_env['LSF_TEST_DISTDIR'] = '#build/linux/standard_core_library/lighting_controller_client/unit_test/'
    unittest_env.Append(LIBPATH = '$LSF_TEST_DISTDIR/lib')
    unittest_env.Prepend(LIBS = ['gtest'])
    unittest_env.Append(LIBPATH = '$LSF_CLIENT_DISTDIR/lib')
    unittest_env.Prepend(LIBS = ['lighting_controller_client.a'])
-   
+
    unittest_env['test_srcs'] = unittest_env.Glob('standard_core_library/lighting_controller_client/unit_test/*.cc')
    unittest_env['test_objs'] = unittest_env.Object(unittest_env['test_srcs']) 
-   
+
    unittest_env.Program('$LSF_TEST_DISTDIR/bin/lsftest', unittest_env['test_objs'])
    unittest_env.Install('$LSF_TEST_DISTDIR/bin', unittest_env['test_objs'])
    unittest_env.Install('$LSF_TEST_DISTDIR/bin', 'standard_core_library/lighting_controller_client/unit_test/test_report/lsftest.conf')
@@ -135,7 +144,7 @@ else:
 lsf_service_env = lsf_env.Clone()
 lsf_service_env.Append(CPPPATH = [ lsf_service_env.Dir('standard_core_library/lighting_controller_service/inc') ])
 lsf_service_env.Prepend(LIBS = ['alljoyn_notification.a', 'alljoyn_about.a', 'alljoyn_config.a', 'alljoyn_services_common.a'])
-lsf_service_env['LSF_SERVICE_DISTDIR'] = 'build/linux/standard_core_library/lighting_controller_service'
+lsf_service_env['LSF_SERVICE_DISTDIR'] = '#build/linux/standard_core_library/lighting_controller_service'
 lsf_service_env.Install('$LSF_SERVICE_DISTDIR/inc', lsf_service_env.Glob('standard_core_library/common/inc/*.h'))
 lsf_service_env.Install('$LSF_SERVICE_DISTDIR/inc', lsf_service_env.Glob('standard_core_library/lighting_controller_service/inc/*.h'))
 lsf_service_env['service_srcs'] = [f for f in lsf_service_env.Glob('standard_core_library/lighting_controller_service/src/*.cc') if not (str(f).endswith('Main.cc'))]
@@ -147,22 +156,24 @@ lsf_service_env.Install('$LSF_SERVICE_DI
 # Set cross compiler vars for ajtcl ahead of Lamp Service compilation
 # in order to compile for openwrt mips platforms
 if lsf_env['OS'] == 'openwrt':
-    os.environ['CROSS_PREFIX'] = "mips-openwrt-linux-uclibc-"
+    os.environ['CROSS_PREFIX'] = "arm-poky-linux-gnueabi-"
     os.environ['CROSS_PATH'] = lsf_env['TARGET_PATH']
-    os.environ['CROSS_FLAGS'] = lsf_env['TARGET_CFLAGS']
+    os.environ['CROSS_CFLAGS'] = lsf_env['TARGET_CFLAGS']
     os.environ['CROSS_LINKFLAGS'] = lsf_env['TARGET_LINKFLAGS']
+os.environ['CROSS_CFLAGS'] = lsf_env['CROSS_CPPFLAGS']
+os.environ['CROSS_LINKFLAGS'] = lsf_env['CROSS_LINKFLAGS']
 
 #Build Lamp Service
 lamp_service_env = SConscript('../ajtcl/SConscript')
 lamp_service_env.Append(LIBPATH = [ lamp_service_env.Dir('../ajtcl') ])
 lamp_service_env.Append(CPPPATH = [ lamp_service_env.Dir('thin_core_library/lamp_service/inc'),
                                     lamp_service_env.Dir('common/inc'),
-                                    lamp_service_env.Dir('../../base_tcl/services_common/inc'),
-                                    lamp_service_env.Dir('../../base_tcl/config/inc'),
-                                    lamp_service_env.Dir('../../base_tcl/notification/inc')
+                                    lamp_service_env.Dir('../../services/base_tcl/services_common/inc'),
+                                    lamp_service_env.Dir('../../services/base_tcl/config/inc'),
+                                    lamp_service_env.Dir('../../services/base_tcl/notification/inc')
                                     ])
 
-lamp_service_env['LSF_LAMP_DISTDIR'] = 'build/linux/thin_core_library/lamp_service'
+lamp_service_env['LSF_LAMP_DISTDIR'] = '#build/linux/thin_core_library/lamp_service'
 lamp_service_env.Install('$LSF_LAMP_DISTDIR/inc', lamp_service_env.Glob('thin_core_library/lamp_service/inc/*.h'))
 
 srcs = [f for f in lamp_service_env.Glob('thin_core_library/lamp_service/src/*.c') if not (str(f).endswith('LampMain.c'))]
@@ -175,10 +186,10 @@ objs = lamp_service_env.Object(lamp_serv
 objs += lamp_service_env['aj_obj']
 
 # services 
-objs += SConscript('../../base_tcl/services_common/SConscript', {'services_common_env': lamp_service_env})
-objs += SConscript('../../base_tcl/config/SConscript', {'config_env': lamp_service_env})
-objs += SConscript('../../base_tcl/notification/src/NotificationCommon/SConscript', {'notif_env': lamp_service_env})
-objs += SConscript('../../base_tcl/notification/src/NotificationProducer/SConscript', {'notif_env': lamp_service_env})
+objs += SConscript('../../services/base_tcl/services_common/SConscript', {'services_common_env': lamp_service_env})
+objs += SConscript('../../services/base_tcl/config/SConscript', {'config_env': lamp_service_env})
+objs += SConscript('../../services/base_tcl/notification/src/NotificationCommon/SConscript', {'notif_env': lamp_service_env})
+objs += SConscript('../../services/base_tcl/notification/src/NotificationProducer/SConscript', {'notif_env': lamp_service_env})
 
 lamp_service_env['lamp_objs'] = objs;
 
@@ -186,4 +197,6 @@ lamp_service = lamp_service_env.Program(
 lamp_service_env.Install('$LSF_LAMP_DISTDIR/bin', lamp_service_env['lamp_objs'])
 lamp_service_env.Install('$LSF_LAMP_DISTDIR/bin', 'thin_core_library/lamp_service/samples/LaunchLampServices.sh')
 
-
+print "LSF_CLIENT_DISTDIR is:", lsf_client_env['LSF_CLIENT_DISTDIR']
+print "LSF_SERVICE_DISTDIR is:", lsf_service_env['LSF_SERVICE_DISTDIR']
+print "LSF_LAMP_DISTDIR is:", lamp_service_env['LSF_LAMP_DISTDIR']
